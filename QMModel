# Import libraries
import tensorflow as tf
from keras.src.legacy.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
import tensorflow.keras.preprocessing.image
from sklearn.metrics import classification_report, confusion_matrix

# Step 1: Data Preprocessing and Augmentation
# Define directories for training and validation images
train_dir = '/Users/fajarpitarsidharma/Documents/00_Phyton_Project/pythonProject/20240930_Disertasi_3.11/img/dataset A train I'
val_dir = '/Users/fajarpitarsidharma/Documents/00_Phyton_Project/pythonProject/20240930_Disertasi_3.11/img/val2007'

# ImageDataGenerator for image augmentation
train_datagen = ImageDataGenerator(rescale=1./255,
                                   rotation_range=20,
                                   width_shift_range=0.2,
                                   height_shift_range=0.2,
                                   shear_range=0.2,
                                   zoom_range=0.2,
                                   horizontal_flip=True,
                                   fill_mode='nearest')

val_datagen = ImageDataGenerator(rescale=1./255)

# Prepare training and validation datasets
train_generator = train_datagen.flow_from_directory(train_dir,
                                                    target_size=(128, 128),
                                                    batch_size=32,
                                                    class_mode='categorical')  # Changed to categorical

val_generator = val_datagen.flow_from_directory(val_dir,
                                                target_size=(128, 128),
                                                batch_size=32,
                                                class_mode='categorical')  # Changed to categorical

# Step 2: Define the CNN Model
model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(128, 128, 3)),
    MaxPooling2D((2, 2)),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D((2, 2)),
    Conv2D(128, (3, 3), activation='relu'),
    MaxPooling2D((2, 2)),
    Flatten(),
    Dense(128, activation='relu'),
    Dropout(0.5),
    Dense(3, activation='softmax')  # Changed to 3 units and softmax for multiclass classification
])

# Step 3: Compile the Model
model.compile(optimizer='adam',
              loss='categorical_crossentropy',  # Changed to categorical_crossentropy
              metrics=['accuracy'])

# Step 4: Train the Model
history = model.fit(train_generator,
                    steps_per_epoch=len(train_generator),
                    epochs=10,
                    validation_data=val_generator,
                    validation_steps=len(val_generator))

# Step 5: Evaluate the Model
val_generator.reset()
predictions = model.predict(val_generator)
predictions = predictions.argmax(axis=1)  # Converts probabilities to class labels

# Print evaluation metrics
print(classification_report(val_generator.classes, predictions, target_names=['Hole', 'Line', 'Stain']))
print(confusion_matrix(val_generator.classes, predictions))

# Save the model for deployment
model.save('quality_monitoring_cnn_model_rev1.h5')
